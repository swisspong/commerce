// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema f dsafdsfsaf

generator client {
  provider = "prisma-client-js"
  // binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Merchant {
  id        String   @id
  username  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Customer {
  id        String   @id
  username  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Category {
  id              String            @id
  name            String            @unique
  index           Int               @default(0)
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  ProductCategory ProductCategory[]
  // category   Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  // categories Category[] @relation("CategoryToCategory")
  // products   Product[]
  // CategoryGrouping CategoryGrouping[]

  @@map("category")
}

model ProductCategory {
  id        Int      @id @default(autoincrement())
  cat_id    String
  category  Category @relation(fields: [cat_id], references: [id])
  prod_id   String
  product   Product  @relation(fields: [prod_id], references: [id])
  index     Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Product {
  id                String              @id
  name              String              @unique
  price             Decimal             @default(0.00)
  availableStock    Int                 @default(0) @map("available_stock")
  description       String              @db.Text
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  ProductCategory   ProductCategory[]
  VariantGroup      VariantGroup[]
  CartItem          CartItem[]
  OrderItemReserved OrderItemReserved[]
  Variant           Variant[]
  ItemReserved      ItemReserved[]

  @@map("product")
}

model VariantGroup {
  id        String   @id
  name      String
  prod_id   String
  product   Product  @relation(fields: [prod_id], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Option    Option[]

  VariantSelected VariantSelected[]
}

model Option {
  id           String        @id
  name         String
  vgrp_id      String?
  variantGroup VariantGroup? @relation(fields: [vgrp_id], references: [id], onDelete: SetNull)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")

  VariantSelected VariantSelected[]
}

model Variant {
  id              String            @id
  prod_id         String
  product         Product           @relation(fields: [prod_id], references: [id])
  sku             String
  description     String
  inventory       Int               @default(0)
  price           Decimal           @default(0.00)
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  VariantSelected VariantSelected[]

  // CartItemVariant CartItemVariant[]
  CartItem          CartItem[]
  OrderItemReserved OrderItemReserved[]
  ItemReserved      ItemReserved[]
}

model VariantSelected {
  vrnt_id      String
  variant      Variant      @relation(fields: [vrnt_id], references: [id], onDelete: Cascade)
  vgrp_id      String
  variantGroup VariantGroup @relation(fields: [vgrp_id], references: [id])
  optn_id      String
  option       Option       @relation(fields: [optn_id], references: [id])
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")

  @@id([vrnt_id, vgrp_id, optn_id])
  @@unique([vrnt_id, vgrp_id])
}

model Cart {
  id        String     @id
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  CartItem  CartItem[]
}

model CartItem {
  id        String   @id
  cart_id   String
  cart      Cart     @relation(fields: [cart_id], references: [id])
  prod_id   String
  product   Product  @relation(fields: [prod_id], references: [id])
  quantitiy Int      @default(0)
  vrnt_id   String?
  variant   Variant? @relation(fields: [vrnt_id], references: [id], onDelete: SetNull)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Order {
  id                String              @id
  total             Decimal             @default(0.00)
  OrderItemReserved OrderItemReserved[]
}

model OrderItemReserved {
  id          String   @id
  order_id    String
  order       Order    @relation(fields: [order_id], references: [id])
  product_id  String
  product     Product  @relation(fields: [product_id], references: [id])
  vrnt_id     String?
  variant     Variant? @relation(fields: [vrnt_id], references: [id], onDelete: SetNull)
  description String
  expiredAt   DateTime
  price       Decimal  @default(0.00)
}

model Checkout {
  id           String         @id
  expiredAt    DateTime
  total        Decimal        @default(0.00)
  ItemReserved ItemReserved[]
}

model ItemReserved {
  id          String   @id
  chkt_id     String
  checkout    Checkout @relation(fields: [chkt_id], references: [id])
  product_id  String?
  product     Product? @relation(fields: [product_id], references: [id], onDelete: SetNull)
  vrnt_id     String?
  variant     Variant? @relation(fields: [vrnt_id], references: [id], onDelete: SetNull)
  name        String
  description String
  quantity    String
  total       Decimal  @default(0.00)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
}

model Admin {
  id        String      @id
  username  String
  email     String      @unique
  password  String
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  AdminRole AdminRole[]
}

model Permission {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  description    String
  rolePermission RolePermission[]
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
}

model Role {
  id             Int              @id @default(autoincrement())
  name           String
  permission_id  Int
  rolePermission RolePermission[]
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  AdminRole      AdminRole[]
}

model RolePermission {
  id            Int        @id @default(autoincrement())
  role_id       Int
  role          Role       @relation(fields: [role_id], references: [id])
  permission_id Int
  permission    Permission @relation(fields: [permission_id], references: [id])
}

model AdminRole {
  id      Int    @id @default(autoincrement())
  roleId  Int
  role    Role   @relation(fields: [roleId], references: [id])
  adminId String
  admin   Admin  @relation(fields: [adminId], references: [id])
}

// model CartItemVariant {
//   id           String   @id
//   cart_item_id String
//   cartItem     CartItem @relation(fields: [cart_item_id], references: [id])
//   vrnt_id      String
//   variant      Variant  @relation(fields: [vrnt_id], references: [id])
// }

// model CategoryGrouping {
//   id              String        @id
//   categoryId      String
//   category        Category      @relation(fields: [categoryId], references: [id])
//   categoryGroupId String
//   categoryGroup   CategoryGroup @relation(fields: [categoryGroupId], references: [id])
//   index           Int           @default(0)
//   createdAt       DateTime      @default(now()) @map("created_at")
//   updatedAt       DateTime      @updatedAt @map("updated_at")
// }

// model CategoryGroup {
//   id String @id

//   createdAt        DateTime           @default(now()) @map("created_at")
//   updatedAt        DateTime           @updatedAt @map("updated_at")
//   CategoryGrouping CategoryGrouping[]
// }
